#!/usr/bin/env ipython
"""Interpolates in latent space between example pairs."""
import argparse

import numpy
import theano
from blocks.graph import ComputationGraph
from blocks.model import Model
from blocks.select import Selector
from blocks.serialization import load
from theano import tensor

from ..utils import (plot_image_grid, create_svhn_streams,
                     create_cifar10_streams, create_celeba_streams)


def main(stream_function, saved_model_path, num_pairs, num_steps, save_path):
    print('Loading saved model...')
    model = Model(load(saved_model_path).algorithm.cost)
    selector = Selector(model.top_bricks)
    encoder_convnet, = selector.select('/encoder_convnet').bricks
    encoder_mlp, = selector.select('/encoder_mlp').bricks
    decoder_mlp, = selector.select('/decoder_mlp').bricks
    decoder_convnet, = selector.select('/decoder_convnet').bricks

    print('Building inference computation graph...')
    nlat = encoder_mlp.output_dim // 2
    x = tensor.tensor4('features')
    phi = encoder_mlp.apply(encoder_convnet.apply(x).flatten(ndim=2))
    mu_phi = phi[:, :nlat]
    inference_cg = ComputationGraph([mu_phi])

    print('Compiling inference function...')
    inference_function = theano.function(
        inference_cg.inputs, inference_cg.outputs[0])

    print('Building generation computation graph...')
    z = tensor.matrix('z')
    mu_theta = decoder_convnet.apply(
        decoder_mlp.apply(z).reshape(
            (-1,) + decoder_convnet.get_dim('input_')))
    generation_cg = ComputationGraph([mu_theta])

    print('Compiling generation function...')
    generation_function = theano.function(
        generation_cg.inputs, generation_cg.outputs[0])

    print('Running inference...')
    streams = stream_function(100, num_pairs)
    sgd_stream, train_stream, valid_stream, test_stream = streams
    iterator = valid_stream.get_epoch_iterator()
    from_z = inference_function(next(iterator)[0])
    to_z = inference_function(next(iterator)[0])

    print('Computing interpolations...')
    from_to_tensor = to_z - from_z
    between_x_list = []
    for alpha in numpy.linspace(0, 1, num_steps + 1):
        between_z = from_z + alpha * from_to_tensor
        between_x_list.append(generation_function(between_z))

    print('Preparing image grid...')
    images = numpy.empty(
        (num_pairs * (num_steps + 1),) + between_x_list[0].shape[1:],
        dtype=between_x_list[0].dtype)
    for i, between_x in enumerate(between_x_list):
        images[i::num_steps + 1] = between_x

    plot_image_grid(images, num_pairs, num_steps + 1, save_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Interpolate in latent space between example pairs.")
    parser.add_argument("which_dataset", type=str,
                        choices=("svhn", "cifar10", "celeba"),
                        help="which dataset to use")
    parser.add_argument("saved_model_path", type=str,
                        help="path to the saved model")
    parser.add_argument("--num-pairs", type=int, default=5,
                        help="number of pairs of examples to interpolate")
    parser.add_argument("--num-steps", type=int, default=7,
                        help="number of interpolation steps")
    parser.add_argument("--save-path", type=str, default=None,
                        help="where to save the interpolations")
    args = parser.parse_args()

    stream_functions = {'svhn': create_svhn_streams,
                        'cifar10': create_cifar10_streams,
                        'celeba': create_celeba_streams}

    main(stream_functions[args.which_dataset], args.saved_model_path,
         args.num_pairs, args.num_steps, args.save_path)
