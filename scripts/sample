#!/usr/bin/env ipython
"""Plots model samples."""
import argparse

import theano
from blocks.bricks import Random
from blocks.graph import ComputationGraph
from blocks.model import Model
from blocks.select import Selector
from blocks.serialization import load
from theano import tensor

from discgen.utils import plot_image_grid


def main(saved_model_path, nrows, ncols, save_path, seed=22349998):
    print('Loading saved model...')
    model = Model(load(saved_model_path).algorithm.cost)
    selector = Selector(model.top_bricks)
    decoder_mlp, = selector.select('/decoder_mlp').bricks
    decoder_convnet, = selector.select('/decoder_convnet').bricks

    print('Building computation graph...')
    z = Random(seed).theano_rng.normal(size=(nrows * ncols,
                                             decoder_mlp.input_dim),
                                       dtype=theano.config.floatX)
    mu_theta = decoder_convnet.apply(
        decoder_mlp.apply(z).reshape(
            (-1,) + decoder_convnet.get_dim('input_')))
    computation_graph = ComputationGraph([mu_theta])

    print('Compiling sampling function...')
    sampling_function = theano.function(
        computation_graph.inputs, computation_graph.outputs[0])

    print('Sampling...')
    samples = sampling_function()

    print('Preparing image grid...')
    plot_image_grid(samples, nrows, ncols, save_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Plot model samples")
    parser.add_argument("saved_model_path", type=str,
                        help="path to the saved model")
    parser.add_argument("--nrows", type=int, default=5,
                        help="number of rows of samples to display")
    parser.add_argument("--ncols", type=int, default=5,
                        help="number of columns of samples to display")
    parser.add_argument("--save-path", type=str, default=None,
                        help="where to save the generated samples")
    args = parser.parse_args()

    main(args.saved_model_path, args.nrows, args.ncols, args.save_path)
