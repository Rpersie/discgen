#!/usr/bin/env ipython
"""Plots reconstructions."""
import argparse

import numpy
import theano
from blocks.bricks import Random
from blocks.graph import ComputationGraph
from blocks.model import Model
from blocks.select import Selector
from blocks.serialization import load
from theano import tensor

from utils import (plot_image_grid, create_svhn_streams,
                   create_cifar10_streams, create_celeba_streams)


def main(stream_function, saved_model_path, nrows, ncols, save_path):
    print('Loading saved model...')
    model = Model(load(saved_model_path).algorithm.cost)
    selector = Selector(model.top_bricks)
    encoder_convnet, = selector.select('/encoder_convnet').bricks
    encoder_mlp, = selector.select('/encoder_mlp').bricks
    decoder_mlp, = selector.select('/decoder_mlp').bricks
    decoder_convnet, = selector.select('/decoder_convnet').bricks

    print('Building computation graph...')
    x = tensor.tensor4('features')
    phi = encoder_mlp.apply(encoder_convnet.apply(x).flatten(ndim=2))
    nlat = encoder_mlp.output_dim // 2
    mu_phi = phi[:, :nlat]
    log_sigma_phi = phi[:, nlat:]
    epsilon = Random().theano_rng.normal(size=mu_phi.shape, dtype=mu_phi.dtype)
    z = mu_phi + epsilon * tensor.exp(log_sigma_phi)
    mu_theta = decoder_convnet.apply(
        decoder_mlp.apply(z).reshape(
            (-1,) + decoder_convnet.get_dim('input_')))
    computation_graph = ComputationGraph([x, mu_theta])

    print('Compiling reconstruction function...')
    reconstruction_function = theano.function(
        computation_graph.inputs, computation_graph.outputs)

    print('Reconstructing...')
    streams = stream_function(100, nrows * ncols)
    sgd_stream, train_stream, valid_stream, test_stream = streams
    examples, reconstructions = reconstruction_function(
        next(valid_stream.get_epoch_iterator())[0])

    print('Preparing image grid...')
    images = numpy.empty(
        (2 * nrows * ncols,) + examples.shape[1:], dtype=examples.dtype)
    images[::2] = examples
    images[1::2] = reconstructions
    plot_image_grid(images, nrows, 2 * ncols, save_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Plot reconstructions")
    parser.add_argument("which_dataset", type=str,
                        choices=("svhn", "cifar10", "celeba"),
                        help="which dataset to use")
    parser.add_argument("saved_model_path", type=str,
                        help="path to the saved model")
    parser.add_argument("--nrows", type=int, default=5,
                        help="number of rows of examples to reconstruct")
    parser.add_argument("--ncols", type=int, default=5,
                        help="number of columns examples to reconstruct")
    parser.add_argument("--save-path", type=str, default=None,
                        help="where to save the reconstructions")
    args = parser.parse_args()

    stream_functions = {'svhn': create_svhn_streams,
                        'cifar10': create_cifar10_streams,
                        'celeba': create_celeba_streams}

    main(stream_functions[args.which_dataset], args.saved_model_path,
         args.nrows, args.ncols, args.save_path)
