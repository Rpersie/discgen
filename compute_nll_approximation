#!/usr/bin/env ipython
"""Computes NLL approximation."""
import argparse

import numpy
import theano
from blocks.bricks import Random
from blocks.model import Model
from blocks.select import Selector
from blocks.serialization import load
from theano import tensor

from utils import (create_svhn_streams, create_cifar10_streams,
                   create_celeba_streams)


def log_sum_exp(A, axis=None):
    A_max = tensor.max(A, axis=axis, keepdims=True)
    B = tensor.log(
        tensor.sum(tensor.exp(A - A_max), axis=axis, keepdims=True)) + A_max

    if axis is None:
        return B.dimshuffle(())
    else:
        if type(axis) is int:
            axis = [axis]
        return B.dimshuffle([i for i in range(B.ndim) if
                             i % B.ndim not in axis])


def main(stream_function, saved_model_path, num_samples, save_path):
    model = Model(load(saved_model_path).algorithm.cost)
    selector = Selector(model.top_bricks)
    encoder_convnet, = selector.select('/encoder_convnet').bricks
    encoder_mlp, = selector.select('/encoder_mlp').bricks
    decoder_mlp, = selector.select('/decoder_mlp').bricks
    decoder_convnet, = selector.select('/decoder_convnet').bricks
    log_sigma_theta_val, = [p for p in model.parameters
                            if p.name == 'log_sigma_theta']
    log_sigma_theta = log_sigma_theta_val.dimshuffle('x', 0, 1, 2)

    streams = stream_function(100, 500)
    sgd_stream, train_stream, valid_stream, test_stream = streams

    x = tensor.tensor4('features')

    def one_step(x):
        phi = encoder_mlp.apply(encoder_convnet.apply(x).flatten(ndim=2))
        nlat = encoder_mlp.output_dim // 2
        mu_phi = phi[:, :nlat]
        log_sigma_phi = phi[:, nlat:]
        epsilon = Random().theano_rng.normal(size=mu_phi.shape,
                                             dtype=mu_phi.dtype)
        z = mu_phi + epsilon * tensor.exp(log_sigma_phi)
        mu_theta = decoder_convnet.apply(
            decoder_mlp.apply(z).reshape(
                (-1,) + decoder_convnet.get_dim('input_')))

        log_q_z_given_x = -0.5 * (
            tensor.log(2 * numpy.cast[theano.config.floatX](numpy.pi)) +
            2 * log_sigma_phi +
            (z - mu_phi) ** 2 / tensor.exp(2 * log_sigma_phi)
        ).sum(axis=1)
        log_p_z = -0.5 * (
            tensor.log(2 * numpy.cast[theano.config.floatX](numpy.pi)) + z ** 2
        ).sum(axis=1)
        log_p_x_given_z = -0.5 * (
            tensor.log(2 * numpy.cast[theano.config.floatX](numpy.pi)) +
            2 * log_sigma_theta +
            (x - mu_theta) ** 2 / tensor.exp(2 * log_sigma_theta)
        ).sum(axis=[1, 2, 3])

        return log_p_z + log_p_x_given_z - log_q_z_given_x

    rval, updates = theano.scan(
        fn=one_step, non_sequences=x, n_steps=num_samples)
    sum_nll = -(log_sum_exp(rval, axis=0) - tensor.log(num_samples)).sum()

    nll_approximation_function = theano.function([x], sum_nll, updates=updates)

    print('Using {} samples per data point'.format(num_samples))
    for (name, stream) in (('Training', train_stream),
                           ('Validation', valid_stream),
                           ('Test', test_stream)):
        sum_ = 0.0
        examples_seen = 0
        for batch, in stream.get_epoch_iterator():
            sum_ += nll_approximation_function(batch)
            examples_seen += len(batch)
        print('{} NLL approximation: {}'.format(name, sum_ / examples_seen))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Compute NLL approximation")
    parser.add_argument("which_dataset", type=str,
                        choices=("svhn", "cifar10", "celeba"),
                        help="which dataset to use")
    parser.add_argument("saved_model_path", type=str,
                        help="path to the saved model")
    parser.add_argument("--num-samples", type=int, default=100,
                        help="number of samples per data point")
    parser.add_argument("--save-path", type=str, default=None,
                        help="where to save the reconstructions")
    args = parser.parse_args()

    stream_functions = {'svhn': create_svhn_streams,
                        'cifar10': create_cifar10_streams,
                        'celeba': create_celeba_streams}

    main(stream_functions[args.which_dataset], args.saved_model_path,
         args.num_samples, args.save_path)
